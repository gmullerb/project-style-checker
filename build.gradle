//  Copyright (c) 2018 Gonzalo MÃ¼ller Bravo.
//  Licensed under the MIT License (MIT), see LICENSE.txt

plugins {
  id 'all.shared.gradle.project-style-checker'
  id 'com.github.ksoichiro.console.reporter' version '0.6.2'
  id 'com.gradle.plugin-publish' version '0.10.0'
  id 'groovy'
  id 'jacoco'
}

repositories {
  jcenter()
  maven {
    url 'https://plugins.gradle.org/m2/'
  }
  maven {
    url 'https://dl.bintray.com/gmullerb/all.shared.gradle'
  }
}

dependencies {
  implementation gradleApi()
  implementation 'gradle.plugin.all.shared.gradle.file-lister:file-lister:+'
  implementation 'gradle.plugin.all.shared.gradle.base-style-config-wrapper:base-style-config-wrapper:3.+'
  testImplementation 'all.shared.gradle:spy-project-factory:+'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:+'
  testRuntime 'org.junit.jupiter:junit-jupiter-engine:+'
}

final PLUGIN_SITE = 'https://github.com/gmullerb/project-style-checker/'

// Plugin settings
//////////////////

pluginBundle {
  website = PLUGIN_SITE
  vcsUrl = PLUGIN_SITE
  description = 'A small set of tasks for checking file style for all files and for checking code style of Gradle\'s code'
  tags = ['base-style-config', 'base-style-config-wrapper', 'code style', 'coding style', 'coding standards', 'best practices',
    'checkstyle', 'pmd', 'codenarc', 'eslint', 'typescript-eslint', 'tslint', 'java', 'javascript', 'groovy', 'gradle code',
    'backend code', 'frontend code', 'java code', 'groovy code', 'javascript code', 'js code', 'typescript code', 'ts code',
    'build code', 'gradle code', 'java', 'groovy', 'javascript', 'js', 'typescript', 'ts', 'gradle',
    'java style', 'groovy style', 'javascript style', 'js style', 'typescript style', 'ts style', 'gradle style',
    'tabulation checking', 'end of file checking', 'tab character']
  plugins {
    thePlugin {
      id = project.hasProperty('PLUGIN_ID')
        ? property('PLUGIN_ID')
        : 'Set plugin id'
      displayName = 'Project Style Checker plugin'
    }
  }
}

consoleReporter {
  jacoco {
    autoconfigureCoverageConfig false
  }
}

// Task assess
////////////////

task assess {
  group = 'Assessment'
  dependsOn = ['codenarcMain', 'codenarcTest']
}

// Task settings
////////////////

codenarcTest {
  mustRunAfter = ['compileTestGroovy']
}

check {
  dependsOn += ['assess']
}

test {
  // Test task settings
  useJUnitPlatform()
  // gradle task settings
  finalizedBy reportCoverage
}

jacocoTestReport {
  doFirst {
    classDirectories.from = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: '**/*_closure*')
    })
  }

  reports {
    xml.enabled true
  }
}

jacocoTestCoverageVerification {
  // jacocoTestCoverageVerification task settings
  doFirst {
    classDirectories.from = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: '**/*_closure*')
    })
  }
  violationRules {
    rule {
      element = 'BUNDLE'
      limit {
        counter = 'BRANCH'
        value = 'COVEREDRATIO'
        minimum = 0.95
      }
    }
    rule {
      element = 'BUNDLE'
      limit {
        counter = 'INSTRUCTION'
        value = 'COVEREDRATIO'
        minimum = 0.85
      }
    }
  }
  // gradle task settings
  shouldRunAfter jacocoTestReport, reportCoverage
}

reportCoverage {
  dependsOn jacocoTestReport
}

// Default task
///////////////

defaultTasks 'assessCommon', 'assessGradle', 'build'
